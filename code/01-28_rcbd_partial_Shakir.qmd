---
title: "RCBD"
format: html
---

# Introduction  
The goals of this exercise are to:  
- Create an analytical workflow for an **RCBD**, from data import through publication-ready plot  
- Understand each of its components  

# a) Setup  
Here is where we load the packages we will use.  
```{r setup, warning=FALSE, message=FALSE}
# Loading packages
#install.packages("tidyverse")
library(tidyverse) # for data wrangling and plotting
#install.packages("car")
library(car) # for Anova function
#install.packages("lme4")
library(lme4) #for Mixed Effect ANOVA Model
#install.packages("broom")
library(broom) # for model residuals extraction
#install.packages("emmeans")
library(emmeans) # for model mean extraction
#install.packages("multcomp")
library(multcomp) # for pairwise comparison letter display
```

**IMPORTANT NOTE**:  
We are using in this exercise the same data set as the one used for the CRD exercise. This is only for **teaching purposes!!**  

In your own analysis, you should always analyze a given designed study data set based on the design that it was implemented with.  
You should NOT analyze a given designed study with a different design than what it was implemented with.  

This is not an option!  

```{r data import, warning=FALSE, message=FALSE}
rcbd_df <- read_csv("../data/wheat_nk_balkh.csv")

rcbd_df
```

# b) EDA tables  
```{r summary EDA tables, warning=FALSE, message=FALSE}
summary(rcbd_df)
```

```{r glimpse EDA tables, warning=FALSE, message=FALSE}
glimpse(rcbd_df) #To check variable types i.e., how R is interpreting the variables
```
# c) Wrangling

##Important note: Question that will come in exam

*Question: What do the "pipe" function do?*

*Answer:* 

The "pipe" function takes what is on its left and feeds that as the input of what is on its right. For example, the first pipe %>% in the following takes only "rcbd_dfw <- rcbd_df" as the data input and feeds to what is on its left. However, the second pipe takes everything that is on its right and feeds as input to what is on its left. Each pipe on any pipe flow is going to take everything before it (from the very beginning of the code chunk) as the input of the next function that is on the left of that pipe (not just  the immediate previous function as the input). Everything before that 2nd pipe %>% goes into the next function as the input. 


```{r rcbd_dfw data wrangling, warning=FALSE, message=FALSE}
rcbd_dfw <- rcbd_df %>% #1st pipe #rcbd_dfw = RCBD wrangled data frame
  mutate(rep = factor(rep), # "factor()" function converts "rep" from a "numeric" variable to "categorical" variable
         nrate_kgha = factor(nrate_kgha),  #"factor()" function converts "numeric" variable to "categorical" variable
         krate_kgha = factor(krate_kgha) #"factor()" function converts "numeric" variable to "categorical" variable
         ) %>% #2nd pipe
  mutate(trtname = paste0(nrate_kgha,"+",krate_kgha)) #to combine the "nrate_kgha" and "krate_kgha" treatments, then treat the combined variable "trtname" as a factor

rcbd_dfw #w for wrangled version
```


```{r rcbd_dfw summary EDA table for the wrangled data frame, warning=FALSE, message=FALSE}
summary(rcbd_dfw)
```
Number of replicates: 4  
Number o treatments: 3 N rates x 3 K rates = 9  
Number of observations: 4 (# of replicates) x 9 (# of treatments) = 36  
Yield: from 2795 to 7445 kg/ha  

# d) EDA plots  
```{r n boxplot, warning=FALSE, message=FALSE}
ggplot(rcbd_dfw, aes(x = nrate_kgha, 
                    y = yield_kgha,
                    fill = nrate_kgha)) +
  geom_boxplot() +
   stat_boxplot(geom = "errorbar", width = 0.2) + #To draw horizontal error bars (caps) at the ends of the boxplot whiskers
  #geom_point()+
  geom_jitter() +
  theme(legend.position = "none") +
  labs(x = "Nitrogen Rate (Kg/ Ha)", 
       y = "Yield (Kg/ Ha)"
       )
```

```{r k boxplot, warning=FALSE, message=FALSE}
ggplot(rcbd_dfw, aes(x = krate_kgha, 
                    y = yield_kgha,
                    color = krate_kgha)) +
  geom_boxplot() +
  stat_boxplot(geom = "errorbar", width = 0.2) + #To draw horizontal error bars (caps) at the ends of the boxplot whiskers
  geom_jitter() +
  theme(legend.position = "none") +
  labs(x = "Potassium Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") 
```

```{r nitrogen*potassium rate boxplot, warning=FALSE, message=FALSE}
ggplot(rcbd_dfw, aes(x = nrate_kgha, 
                    y = yield_kgha,
                    fill = nrate_kgha)) +
  geom_boxplot() +
  stat_boxplot(geom = "errorbar", width = 0.2) + #To draw horizontal error bars (caps) at the ends of the boxplot whiskers
  geom_jitter() +
  theme(legend.position = "none") +
  facet_grid(.~krate_kgha,
             labeller = labeller(krate_kgha = function(x) {
               paste("Potassium Rate (Kg/Ha):", x)
             })) + #takes all levels of a specified variable, then creates separate boxplots for each of the variable levels 
  theme(legend.position = "none") #removes the legends from the graph
```

# e) Statistical model  
## Set-to-zero vs. sum-to-zero  

## Shortcut for model specification:

Model specification (long way): y ~ x1 + x2 + x1:x2
Model specification (short way): y ~ x1*x2
Both of these same expressions are identical and will do the same operation: y ~ x1 + x2 + x1:x2 == y ~ x1*x2

For this example,
Model specification (long way): yield_kgha ~ nrate_kgha + krate_kgha + nrate_kgha:krate_kgha
Model specification (short way): yield_kgha ~ nrate_kgha*krate_kgha
Both of these same expressions are identidal and will do the same operation:
yield_kgha ~ nrate_kgha + krate_kgha + nrate_kgha:krate_kgha == yield_kgha ~ nrate_kgha*krate_kgha

"Instead of specifying 
          `nrate_kgha + krate_kgha + nrate_kgha:krate_kgha`,  
we could have just used  
                   `nrate_kgha*krate_kgha`.  

R interprets the `*` as "give me all main effects and interactions".

The more interaction effects a model has, the more efficient using the * becomes." - Dr. Bastos  

## Changing default contrast type from "set-to-zero" to "sum-to-zero"

In R, the default contrast type is *set-to-zero*.  

In research, we normally are interested in *sum-to-zero* contrasts.  

Below we change the default to sum-to-zero ("contr.sum") before fitting the model.


```{r model, warning=FALSE, message=FALSE}
# Changing to sum-to-zero contrast
options(contrasts = c("contr.sum", "contr.poly")) #contrasts = c("contr.sum", "contr.poly") means that if the variable is categorical, change the contrast to sum to zero; if the variable is continuous, then change the contrast to polynomial 

# Model fitting
rcbd_mod <- lm(yield_kgha ~ rep + nrate_kgha*krate_kgha, #the block effect i.e., rep is what separates RCBD from CRD. In RCBD, the "rep" is included in the model as a factor. However, "rep" is not included in the model for CRD.
               data = rcbd_dfw
               )


# Summary
summary(rcbd_mod) #Not the ANOVA table; table for contrast values for each estimate/ coefficients
```

## Model specification tips  
Instead of specifying 
          `nrate_kgha + krate_kgha + nrate_kgha:krate_kgha`,  
we could have just used  
                   `nrate_kgha*krate_kgha`.  

R interprets the `*` as "give me all main effects and interactions".

The more interacting effects a model has, the more efficient using the * becomes.  

# f) ANOVA table  
The `Anova()` function allows us to use **type 3 sum of squares**.  

The common functions `aov()` and `anova()` use type 1 SS, which is the wrong choice IF have unbalanced data.

Balanced data = no missing data
Unbalanced data = contains missing data

If data is balanced, type 1 and 3 give same results.  

For sake of peace of mind, it is simpler to just always use type 3.  

```{r ANOVA, warning=FALSE, message=FALSE}
Anova(rcbd_mod, type=3) #Anova (upper case A) is case sensitive
```
Considering alpha = 0.1 (10% level of significance, which is not common), notice how rep (i.e., block in this case) has a significant effect.  

This means that we **did well by blocking**, as it was able to absorb some of the overall variability and remove it from the error. Remember how **decreasing error SS** was one way to improve the model statistical power.  

Since the interaction is significant here, we should extract means and perform pairwise comparisons for the interaction term.

Before we do that, let's check our model assumptions. Remember, a model is only valid for inference (i.e., means and pwc) It if fulfills the linear model assumptions.  

# g) Linear model assumptions  
## Extracting residuals
First, let's extract our model residuals, and also create studentized residuals.  

```{r rcbd_resid, warning=FALSE, message=FALSE}
rcbd_resid <- broom::augment(rcbd_mod) %>% #"augment() function is included in the "broom" package
  mutate(.studresid=rstudent(rcbd_mod)) #creating studentized residuals in a separate column

rcbd_resid
```

Now, let's recap the linear model assumptions:  

Very important note: We always check model assumptions based on residuals, not on raw data.

Model assumptions: Variance of the error ~ eiidN(0, sigma_squared)

It means that the residuals are identically and independently distributed normal with a mean of 0 and homogeneous variance of sigma_squared

- Residual independence (no pattern)  
- Residual variance homogeneity (homoscedasticity)  
- Residual normality (discuss this!)  
- Outlier detection (< -3 or > 3)  


## Residual independence  
- For this, we use the **fitted vs. residual plot**.  
- What we want to see: no clear pattern in residuals, random cloud of points.  
- What we do not want to see: clear pattern, for example, quadratic shape.  
- Adding a `geom_smooth()` helps with that conclusion. We want to see the smooth line and error bands comprising 0 on the y axis.  

```{r fitted vs. residual plot to check for residual independence, warning=FALSE, message=FALSE}
ggplot(rcbd_resid, aes(x=.fitted, y=.studresid))+
  geom_hline(yintercept = 0, color="red")+
  geom_point(shape = 21,
             fill = "purple", 
             size = 3,
             alpha = .7)+
  geom_smooth()+
  geom_hline(yintercept = c(-3,3), color = "red")+
  theme_bw()
```

Run the plot above with and without `geom_smooth()`.  
Notice how it helps to see a pattern that otherwise it's hard to detect visually.  

Although it seems like there is some pattern, I wouldn't worry here since the error of the smooth line comprises 0 in the y-axis.  

## Residual homoscedasticity  
- For this, we use the **fitted vs. residual plot**.  
- What we want to see: no clear pattern in residuals, random cloud of points.  
- What we do not want to see: residuals increasing as fitted value increases (fan shape).  
- Adding a `geom_smooth()` helps with that conclusion. We want to see the smooth line and error bands comprising 0 on the y axis.  

```{r fitted vs. residual plot to check for residual homoscedasticity, warning=FALSE, message=FALSE}
ggplot(rcbd_resid, aes(x=.fitted, y=.studresid))+
  geom_hline(yintercept = 0, color="red")+
  geom_point(shape = 21,
             fill = "purple", 
             size = 3,
             alpha = .7)+
  geom_smooth()+
  geom_hline(yintercept = c(-3,3), color = "red")+
  theme_bw()
```
Looks great! Next.  

## Residual normality  

Residuals have a mean of 0 and normally distributed
- For this, we use the **quantile-quantile (QQ) plot** and **density plot**.    
- What we want to see: residuals centered around 0 and following a normal distribution.  
- What we do not want to see: skewed residuals that do not follow a normal distribution.  

On the QQ plot, we want to see residuals on the black line, meaning they follow their theoretical normal distribution.  
```{r checking residual normality with qq plot, warning=FALSE, message=FALSE}
ggplot(rcbd_resid, aes(sample=.studresid))+
  stat_qq(shape = 21,
          fill = "purple", 
          size = 3,
          alpha = .7
          ) +
  stat_qq_line()+
  labs(x = "Theoretical quantile",
       y = "Sample quantile")+
  theme_bw()
```

It's common for some residuals in the tails being off, especially with low N (N=36). Nothing to worry here.  


```{r checking residual normality with density plot, warning=FALSE, message=FALSE}
ggplot(rcbd_resid, aes(x=.studresid))+
  geom_density(color = "black",
               fill = "purple",
               alpha = .7)+
  scale_x_continuous(breaks = c(-3,0,3), limits = c(-3,3))+
  theme_bw()

```
The peak of the density is slightly off, lower than 0, but nothing to worry.  

Next.  

## Residual outliers  
- For this, we use the **fitted vs. residual plot**.  
- What we want to see: most if not all residuals within [-3,3] on a studentized residual scale.  
- What we do not want to see: too many residuals > 3 or < -3, the farther away form the thresholds the worse.  
- Adding a `geom_hline()` at the thresholds helps to visualize and diagnose.   

```{r fitted vs. residual plot to check for residual outliers, warning=FALSE, message=FALSE}
ggplot(rcbd_resid, aes(x=.fitted, y=.studresid))+
  geom_hline(yintercept = 0, color="red")+
  geom_point(shape = 21,
             fill = "purple", 
             size = 3,
             alpha = .7)+
  geom_smooth()+
  geom_hline(yintercept = c(-3,3), color = "red")+
  labs(x = "Fitted values", y = "Studentized residuals") +
  theme_bw()

```
All residuals are within the [-3, 3] interval, so nothing to worry here.  
Now that model assumptions have been checked and met, we can proceed to using the model for inference.  

# h) Model means  
The next step in the workflow is extracting the model means.  

Whenever we are showing means (in tables or plots), we want them to be from a model, and not simply the arithmetic mean in the raw data (like we would get with `group_by()` and `summarise()`).  

This is specially important IF the data is unbalanced (i.e., missing data), in which case model means are DIFFERENT from arithmetic means on raw data. 

Also, when extracting means from an interaction, there are few different ways of doing it, and which one we do depends on the study objectives.

Remember that it is at this level that we establish the hierarchy of how our pairwise comparisons will be performed.  

Let's extract it by comparing everything to everything else.

## Estimated marginal means for all combinations of nitrogen*potassium interactions

```{r interaction means all}
rcbd_means_all <- emmeans(rcbd_mod, #"em" in "emmeans" stand for "expected mariginal means
                         ~nrate_kgha:krate_kgha #We use interaction means i.e., everything in the same level
                         )

rcbd_means_all
```

## Estimated marginal means of all levels of nitrogen rates inside each level of potassium rates

```{r interaction means n inside k: to extract the means of nitrogen rates inside each levels of potassim rates}
#If our goal is to find the best in Nitrogen rates inside each of the Potassium rates, we will extract the means of nitrogen inside potassim rates:

rcbd_means_nk <- emmeans(rcbd_mod, ~nrate_kgha | krate_kgha) #"~nrate_kgha | krate_kgha" this would do all nitrogen rates inside each potassium rate separately; it means we are asking  for all the Nitrogen rates inside each one of the Potassium rates

#We use "|" for interaction means of Nitrogen levels (levels of one factor) inside Potassium levels (levels of another factor) i.e., one factor inside the levels of other

rcbd_means_nk
```
## Estimated marginal means of all levels of potassium rates inside each level of nitrogen rates


```{r interaction means k inside n: to extract the means of potassium inside nitrogen rates}
#If our goal is to find the best Potassium rate inside each Nitrogen rates, we will run the following:

rcbd_means_kn <- emmeans(rcbd_mod, ~krate_kgha | nrate_kgha) #"~nrate_kgha | krate_kgha" this would do all potassium rates inside each nitrogen rate separately; it means we are asking  for all the potassium rates inside each one of the nitrogen rates

#We use "|" for interaction means of Potassium levels (levels of one factor) inside Nitrogen levels (levels of another factor) i.e., one factor inside the levels of other
#Important note: flipping the order of krate_kgha either before or after the "|" sign makes a difference
rcbd_means_kn
```

# i) Pairwise comparisons  
Now that we extracted means, let's perform pairwise comparisons among them.  

## Pairwise comparisons of all combinatinos of nitrogen*potassium interaction levels  

```{r interaction pwc all, warning=FALSE, message=FALSE}
rcbd_cld_all <- cld(rcbd_means_all,
                   reversed = T, #Reverses the order of appearance from highest to lowest in the columns (default is lowest to highest)
                   Letters = letters, #Lower case "letters" is a native object of R that displays all the letters of the Alphabet in lowercase; The argument here is the upper case "Letters" which is a function, I want "Letters" function to follow the order of the lower case "letters" object
                   adjust = "none", #"none" adjustment is reported as Fishers LSD #To specify the type of multiple comparison adjustment e.g., type in "tukey" to use the Tukey's adjustment; "none" to use no adjustment
                   #alpha = 0.1 #To change the level of significance #default "alpha" is 0.05
                   )

#The "cld" in the "cld()" function stands for "Compact Letter Display"

rcbd_cld_all
```
## Pairwise comparisons of all levels of nitrogen rates inside each level of potassium rates  

```{r interaction pwc n inside k}
rcbd_cld_nk <- cld(rcbd_means_nk, 
                   reversed=T, #Reverses the order of appearance from highest to lowest in the columns (default is lowest to highest)
                   adjust="none", #To specify the type of multiple comparison adjustment e.g., type in "tukey" to use the Tukey's adjustment; "none" to use no adjustment
               Letters=letters#Lower case "letters" is a native object of R that displays all the letters of the Alphabet in lowercase; The argument here is the upper case "Letters" which is a function, I want "Letters" function to follow the order of the lower case "letters" object
               ) 
#Multiple comparisons for Nitrogen groups only within the groups of Potassium
rcbd_cld_nk
```
## Pairwise comparisons of all levels of potassium rates inside each level of nitrogen rates  


```{r interaction pwc k inside n}
rcbd_cld_kn <- cld(rcbd_means_kn, 
                   reversed=T, #Reverses the order of appearance from highest to lowest in the columns (default is lowest to highest)
                   adjust="none", #To specify the type of multiple comparison adjustment e.g., type in "tukey" to use the Tukey's adjustment; "none" to use no adjustment
               Letters=letters#Lower case "letters" is a native object of R that displays all the letters of the Alphabet in lowercase; The argument here is the upper case "Letters" which is a function, I want "Letters" function to follow the order of the lower case "letters" object
               ) 
#Multiple comparisons for only Potassium groups  within the groups of Nitrogen
rcbd_cld_kn
```
Notice how different types of pwc (which are actually coming from differences in how we extracted the means) are testing different hypothesis. 

# g) Final plot  

Let's plot our results, including both **raw data** (for allowing our audience to inspect data distribution) and **statistical model summary (i.e., letter separation)** for inference purposes.   

Let's make these plots publication ready.  

## Estimated marginal means for all combinations of nitrogen*potassium interactions

```{r interaction means all}
rcbd_means_all <- emmeans(rcbd_mod, #"em" in "emmeans" stand for "expected mariginal means
                         ~nrate_kgha:krate_kgha #We use interaction means i.e., everything in the same level
                         )

rcbd_means_all
```

## Pairwise comparisons of all combinatinos of nitrogen*potassium interaction levels  

```{r interaction pwc all, warning=FALSE, message=FALSE}
rcbd_cld_all <- cld(rcbd_means_all,
                   reversed = T, #Reverses the order of appearance from highest to lowest in the columns (default is lowest to highest)
                   Letters = letters, #Lower case "letters" is a native object of R that displays all the letters of the Alphabet in lowercase; The argument here is the upper case "Letters" which is a function, I want "Letters" function to follow the order of the lower case "letters" object
                   adjust = "none", #"none" adjustment is reported as Fishers LSD #To specify the type of multiple comparison adjustment e.g., type in "tukey" to use the Tukey's adjustment; "none" to use no adjustment
                   #alpha = 0.1 #To change the level of significance #default "alpha" is 0.05
                   )

#The "cld" in the "cld()" function stands for "Compact Letter Display"

rcbd_cld_all
```


## Boxplots with pairwise comparisons for all combinations of nitrogen*potassium level interactions

Let's do some light wrangling here to be able to plot these.  

```{r data wrangling for crd plot with all combinations of nitrogen*potassium level interactions, warning=FALSE, message=FALSE}
rcbd_cld_selected <- rcbd_cld_all %>% #At this point, "crd_cld_al" is not a data frame and cannot be used to plot using ggplot. The first thing we need to do is to convert the "crd_cld_all" into a data frame using the function "as.data.frame()"
  as.data.frame() %>%
  mutate(letter = trimws(.group)) %>% #To remove the wide spaces from the ".group" column, we will a create a new column which we will call "letter" and use the function "trimws()" [which stands for trim wide space]. This will remove the extra spaces from the ".group" column and store the letters in a new column called "letter"
  mutate(trtname = paste0(nrate_kgha, "+", krate_kgha)) #to combine the "nrate_kgha" and "krate_kgha" treatments, then treat the combined variable "trtname" as a factor

rcbd_cld_selected
```


```{r rcbd final boxplot plot with all combinations of nitrogen*potassium level interactions, warning=FALSE, message=FALSE}

ggplot() +
  # Raw data and boxplots  
  geom_boxplot(data = rcbd_dfw, #raw data
               aes(x = trtname, 
                   y = yield_kgha,
                   fill = trtname 
                   )) + #We want to see the nitrogen rate in the x axis for all levels of potassium rates
  geom_jitter(data = rcbd_dfw,
              aes(x = trtname, 
                  y = yield_kgha,
                  color = trtname),
              alpha = .6, #To add transparency to the points; 0 = fully transparent - 1 = fully solid
              ) +
  theme(legend.position = "none") +
  # Adding letters
  #geom_text(data = rcbd_cld_selected,
            #aes(x = trtname, 
                #y = emmean, #Here, "emmean" goes in the y-axis. Note that "yield_kgha" deos not go to y-axis. In fact, "yield_kgha" is not present in the "rcbd_cld_selected" object.
                #label = .group
                #)
            #)
  geom_label(data = rcbd_cld_selected,
             aes(x = trtname, #We want to see the treatments in the x axis for all levels of pottasium rates
                 y = emmean, #Here, "emmean" goes in the y-axis. Note that "yield_kgha" deos not go to y-axis. In fact, "yield_kgha" is not present in the "rcbd_cld_selected" object.
                 label = letter),
             size = 3,
             label.padding = unit(.1, "lines")) +
   labs(x = "N Rate + K Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") +
   scale_fill_viridis_d() + #Color-blind friendly fill theme #"d" for discrete; We are coloring by "trtname" and "trtname" is a discrete variable
   scale_color_viridis_d() #changes the color of the dots to color-blind friendly

ggsave("../output/rcbd_nk_interaction_boxplot.png",
       height = 4,
       width = 6
       )
```



## Estimated marginal means of all levels of nitrogen rates inside each level of potassium rates

```{r interaction means n inside k: to extract the means of nitrogen rates inside each levels of potassim rates}
#If our goal is to find the best in Nitrogen rates inside each of the Potassium rates, we will extract the means of nitrogen inside potassim rates:

rcbd_means_nk <- emmeans(rcbd_mod, ~nrate_kgha | krate_kgha) #"~nrate_kgha | krate_kgha" this would do all nitrogen rates inside each potassium rate separately; it means we are asking  for all the Nitrogen rates inside each one of the Potassium rates

#We use "|" for interaction means of Nitrogen levels (levels of one factor) inside Potassium levels (levels of another factor) i.e., one factor inside the levels of other

rcbd_means_nk
```
## Pairwise comparisons of all levels of nitrogen rates inside each level of potassium rates  

```{r interaction pwc n inside k}
rcbd_cld_nk <- cld(rcbd_means_nk, 
                   reversed=T, #Reverses the order of appearance from highest to lowest in the columns (default is lowest to highest)
                   adjust="none", #To specify the type of multiple comparison adjustment e.g., type in "tukey" to use the Tukey's adjustment; "none" to use no adjustment
               Letters=letters#Lower case "letters" is a native object of R that displays all the letters of the Alphabet in lowercase; The argument here is the upper case "Letters" which is a function, I want "Letters" function to follow the order of the lower case "letters" object
               ) 
#Multiple comparisons for Nitrogen groups only within the groups of Potassium
rcbd_cld_nk
```

## Boxplots with pairwise comparisons for all levels of nitrogen rates inside each level of potassium rates  

```{r rcbd plot interaction pwc Potassium (k) inside Nitrogen (n) rates}

#For interaction pwc Potassium (k) inside Nitrogen (n) rates
rcbd_cld_kn_selected <- rcbd_cld_kn %>% #At this point, "crd_cld_kn" is not a data frame and cannot be used to plot using ggplot. The first thing we need to do is to convert the "crd_cld_all" into a data frame using the function "as.data.frame()"
  as.data.frame() %>%
  mutate(letter = trimws(.group)) %>% #To remove the wide spaces from the ".group" column, we will a create a new column which we will call "letter" and use the function "trimws()" [which stands for trim wide space]. This will remove the extra spaces from the ".group" column and store the letters in a new column called "letter"
  mutate(trtname = paste0(nrate_kgha, "+", krate_kgha)) #to combine the "nrate_kgha" and "krate_kgha" treatments, then treat the combined variable "trtname" as a factor

rcbd_cld_kn_selected
```

```{r rcbd plot interaction pwc nitrogen (n) inside potassium (k) rates}

ggplot() +
  # Raw data and boxplots  
  geom_boxplot(data = rcbd_dfw,
               aes(x = krate_kgha, 
                   y = yield_kgha,
                   fill = krate_kgha 
                   )) + #We want to see the nitrogen rate in the x axis for all levels of potassium rates
  geom_jitter() +
  theme(legend.position = "none") +
  # Adding letters
  geom_label(data = rcbd_cld_kn_selected,
             aes(x = krate_kgha, #We want to see the nitrogen rates in the x axis for all levels of pottasium rates
                 y = emmean,
                 label = letter),
             size = 3,
             label.padding = unit(.1, "lines")) +
  facet_grid(.~ nrate_kgha,
             labeller = labeller(nrate_kgha = function(x) {
               paste("Nitrogen Rate (Kg/Ha):", x)
             })) + #Within Nitrogen rates, we want to compare Potassium rates. So, "nrate_kgha" will go in the "facet_grid()"  
  labs(x = "Potassium Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") +
  scale_fill_viridis_d() + #Color-blind friendly fill theme #"d" for discrete; We are coloring by "trtname" and "trtname" is a discrete variable
   scale_color_viridis_d() #changes the color of the dots to color-blind friendly

ggsave("../output/rcbd_n_inside_k_boxplot.png",
       height = 4,
       width = 6
       )
```

## Estimated marginal means of all levels of potassium rates inside each level of nitrogen rates


```{r interaction means k inside n: to extract the means of potassium inside nitrogen rates}
#If our goal is to find the best Potassium rate inside each Nitrogen rates, we will run the following:

rcbd_means_kn <- emmeans(rcbd_mod, ~krate_kgha | nrate_kgha) #"~nrate_kgha | krate_kgha" this would do all potassium rates inside each nitrogen rate separately; it means we are asking  for all the potassium rates inside each one of the nitrogen rates

#We use "|" for interaction means of Potassium levels (levels of one factor) inside Nitrogen levels (levels of another factor) i.e., one factor inside the levels of other
#Important note: flipping the order of krate_kgha either before or after the "|" sign makes a difference
rcbd_means_kn
```

## Pairwise comparisons of all levels of potassium rates inside each level of nitrogen rates  


```{r interaction pwc k inside n}
rcbd_cld_kn <- cld(rcbd_means_kn, 
                   reversed=T, #Reverses the order of appearance from highest to lowest in the columns (default is lowest to highest)
                   adjust="none", #To specify the type of multiple comparison adjustment e.g., type in "tukey" to use the Tukey's adjustment; "none" to use no adjustment
               Letters=letters#Lower case "letters" is a native object of R that displays all the letters of the Alphabet in lowercase; The argument here is the upper case "Letters" which is a function, I want "Letters" function to follow the order of the lower case "letters" object
               ) 
#Multiple comparisons for only Potassium groups  within the groups of Nitrogen
rcbd_cld_kn
```

## Boxplots with pairwise comparisons for all levels of potassium rates inside each level of nitrogen rates  


```{r data wrangling for rcbd plot interaction pwc Potassium (k) inside Nitrogen (n) rates, warning=FALSE, message=FALSE}

#For interaction pwc Potassium (k) inside Nitrogen (n) rates

rcbd_cld_nk_selected <- rcbd_cld_nk %>% #At this point, "crd_cld_nk_a" is not a data frame and cannot be used to plot using ggplot. The first thing we need to do is to convert the "crd_cld_nk_selected_a" into a data frame using the function "as.data.frame()"
  as.data.frame() %>%
  mutate(letter = trimws(.group)) %>% #To remove the wide spaces from the ".group" column, we will a create a new column which we will call "letter" and use the function "trimws()" [which stands for trim wide space]. This will remove the extra spaces from the ".group" column and store the letters in a new column called "letter"
  mutate(trtname = paste0(nrate_kgha, "+", krate_kgha)) #to combine the "nrate_kgha" and "krate_kgha" treatments, then treat the combined variable "trtname" as a factor

rcbd_cld_nk_selected
```


```{r rcbd plot interaction pwc Potassium (k) inside Nitrogen (n) rates, warning=FALSE, message=FALSE}
ggplot() +
  # Raw data and boxplots  
  geom_boxplot(data = rcbd_dfw,
               aes(x = nrate_kgha, 
                   y = yield_kgha,
                   fill = nrate_kgha #To color the boxplots by "nrate_kgha"
                   )) + #We want to see the potassium rate in the x axis for all levels of nitrogen rates
  geom_jitter() +
  theme(legend.position = "none") +
  # Adding letters
  geom_label(data = rcbd_cld_nk_selected,
             aes(x = nrate_kgha, #We want to see the pottasium rate in the x axis for all levels of nitrogen rates
                 y = emmean,
                 label = letter),
             size = 3,
             label.padding = unit(.1, "lines")) +
  facet_grid(.~ krate_kgha,
             labeller = labeller(krate_kgha = function(x) {
               paste("Potassium Rate (Kg/Ha):", x)
             })) + #Within potassium rates, we want to compare nitrogen rates. So, "krate_kgha" will go in the "facet_grid()"  
  labs(x = "Nitrogen Rate (Kg/ Ha)", y = "Yield (Kg/ Ha)") +
  scale_fill_viridis_d() + #Color-blind friendly fill theme #"d" for discrete; We are coloring by "trtname" and "trtname" is a discrete variable
  scale_color_viridis_d() #changes the color of the dots to color-blind friendly
   

ggsave("../output/rcbd_k_inside_n_boxplot.png",
       height = 4,
       width = 6
       )
```

