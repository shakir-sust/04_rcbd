---
title: "Randomization"
format: html
---

# Introduction  
The goals of this exercise are to:  
- Learn how to randomize CRD and RCBD in R  
- Learn how to create plot layouts with them  

# Setup  
Here is where we load the packages we will use.  
```{r setup}
# Loading packages

#install.packages("tidyverse")
library(tidyverse) # for data wrangling and plotting

```

# Importing data

```{r data import}
rcbd_df <- read_csv("../data/wheat_nk_balkh.csv")

rcbd_df
```

# Treatment design  
Keeping with the same motivational example we've been using, our treatment design is:  

-   2-way factorial\
-   N fertilizer rates: 0, 100, 200 kg N/ha\
-   K fertilizer rates: 0, 30, 60 kg K/ha\
-   3 x 3 = **9 treatment combinations**

Let's define our treatments above in an object.  
```{r}
#Combining levels of variables/ Finding all combinations for all levels of  variables
trts <- crossing(nrate_kgha = c(0, 100, 200), #Here, we will give the name of the variables/columns that we want to cross to find all of their possible combinations. For this example, the variables/ columns that we want to cross are "nrate_kgha" and "krate_kgha"  #"c(0, 100, 200)" function to specify the levels of "nrate_kgha" variable which are 0, 100, and 200
                        krate_kgha = c(0, 30, 60)
                        ) %>%
#If we had another factor "phosphorusrate_kgha", we can indicate this "phosphorusrate_kgha" factor inside the "crossing()" function to get all the 3-way combinations across all 3 factors #Next, we want to create a column/ variable for "treatment numbers" because the more treatment combinations we have, the more difficult it becomes to start referring to them by their treatment combinations. So, we may decide to give these treatment combinations numbers [from 1 to 9, in this case]
  mutate(trtnum = 1:nrow(.)) %>% # "1:nrow(.)" to specify to create rows from the 1st to the last treatment combinations
  mutate(trtname = paste0(nrate_kgha, "+", krate_kgha)) #We use "paste0()" function to combine different values from different columns

trts
```


# CRD  
## Randomization  
Since it is a CRD, randomization is unrestricted.  

```{r crd_rand}
# Setting seed to get same randomization result every time
set.seed(108) #we use "set.seed" for the sake of reproducibility so that the randomization does not shuffle and we get the exact same order of randomization each time we run this code chunk

crd_rand <- crossing(trtname = trts$trtname, #To create a new column "trtname" that basically has the same levels of "trtname" column/variable of the "trts" object created above #the "$" is used to extract the "trtname" column/variable of "trts" object/dataframe
                     rep = 1:4 #Specifying the number of reps i.e., rep 1-4 #in the above code chunk, we created each treatment once, but in this code chunk, now we have each treatment appearing 4 times one for each of the reps
                     ) %>%
  # Since plots are organized without a structure, let's number them 1 through 36
  mutate(plot = 1:nrow(.)) %>% #This is the same as creating "(plot = 1:36)"
  # Randomizing trtname to plots, without restrictions 
  mutate(plot = sample(plot)) %>% #"sample()" function shuffles thing for us
  arrange(plot) #To sort/rearrange all columns by plots i.e., we want to sort/rearrange the plot numbers from 1 to last #In CRD design, the order of the "rep" column does not really matter, so we do not sort by "rep" in CRD. However, we must sort by "rep" for RCBD design


crd_rand
```

## Plot layout  
Let's create a structure for plot layout in different rows and columns.  
The number of rows and columns could be decided based on the actual field layout. For ex., do you have enough space for 9 columns and 4 rows, or 9 rows and 4 columns?  

Let's assume we have space for 9 rows and 4 columns.  

```{r crd_layout}
crd_layout <- crd_rand %>%
  # Defining number of rows and columns in the field for plotting purposes
  #The following repeats all numbers from 1 to 9 four times one after another
  mutate(row = rep(1:4, each = 9)) %>% #function "rep()" repeats a given set of number(s), where the argument "each = 9" is used to specify how many times the given number(s) will be repeated; For this example, the numbers 1 to 4 are repeated 9 times
  #The following creates a sequence of number from 1 to 9 and then repeats it 4 times
  mutate(col = rep(seq(from = 1,
                       to = 9,#creates a sequence from 1 to 9
                       by = 1), times = 4 #"by = 1" is to specify the stepsize of the sequence i.e., the sequence will increase by 1
                   )) %>% #the function "seq()" creates sequence 
  mutate(plotlabel = paste0(plot,"\n", trtname)) # "\n" to break the line of the string
                    
         

  # Creating plot and trtname labels for plotting
crd_layout
```

Now, let's plot it.

```{r crd map}
ggplot(data = crd_layout,
       aes(x = row, y = -col) #"y = -col" to change the order of number appearance in the column into 'top to bottom' order instead of 'bottom to top' order
       ) +
  geom_tile(aes(fill = trtname),
            color = "black",
            show.legend = F
            ) +
  geom_text(aes(label = plot), fontface = "bold", vjust = -.5)+
  geom_text(aes(label = trtname), vjust = 1)+
  labs(title = "CRD randomization of a 3 x 3 factorial (9 treatments)") +
  scale_fill_brewer(palette = "Set3") +
  theme_void() #"theme_void()" removes all the x and y axes and leaves only the map itself

```

Notice how due to unrestricted randomization, we had the replication of some treatments falling in neighboring plots, e.g. plots 12 and 13 have the same treatment.  

```{r}
ggsave("../output/crd_layoutmap_Assignment4_Shakir.png",
       width = 6,
       height = 4,
       bg = "white")
```


# RCBD  
## Randomization  
```{r rcbd_rand}
# Setting seed to get same randomization result every time
set.seed(309) #we use "set.seed" for the sake of reproducibility so that the randomization does not shuffle and we get the exact same order of randomization each time we run this code chunk

rcbd_rand <- crossing(trtname = trts$trtname, #To create a new column "trtname" that basically has the same levels of "trtname" column/variable of the "trts" object created above #the "$" is used to extract the "trtname" column/variable of "trts" object/dataframe
                      rep = 1:4 #Specifying the number of reps i.e., rep 1-4 #in the above code chunk, we created each treatment once, but in this code chunk, now we have each treatment appearing 4 times one for each of the reps
                      ) %>%
  arrange(rep) %>% #To sort/rearrange all columns by reps. In RCBD design, we must sort by "rep" (i.e., block number) because we are gonna be randomizing individually within each one of these reps i.e., blocks
  group_by(rep) %>% #To group by "rep" i.e., "blocks"
  mutate(trtname = sample(trtname)) %>%
  mutate(plot = (rep*100) + 1:9) %>%
  ungroup()
  

#In CRD randomization, we randomized the plot numbers to the treatments. When in came to RCBD, we had to group by the blocks, then first randomize by shuffling the treatments and then write the plot numbers in sequence. The key takeaway is that you are randomizing one of those two component namely plots and treatment numbers/names -- either shuffling the plot number which we did in the CRD example, or you are shuffling the treatment numbers or treatment names which we are doing here int he RCBD case.

rcbd_rand
```

Let's check if in fact each treatment appears once per block.  
```{r}
rcbd_rand %>%
  group_by(rep, trtname) %>% #We are grouping by "rep" and "trtname" to find how many times their combinations appear i.e., to check there is no duplicate for each treatment combination
  tally() %>% #"tally()" function tells you the number of observations within groups that you created
  filter(n > 1) #This is a cross-check: to confirm that there is no treatment appearing more than once per block. If it returns no rows, we have confirmation that our RCBD design is valid, meaning a treatment is appearing only once in each of the reps. If it returns any row, it means there is something wrong in the randomization process.
```

To check how many rows are there in each rep, 

```{r check number of rows within each rep}
rcbd_rand %>%
  group_by(rep) %>% #We are grouping by "rep" and "trtname" to find how many times their combinations appear i.e., to check there is no duplicate for each treatment combination
  tally() #%>% #"tally()" function tells you the number of observations within groups that you created
  #filter(n > 1) #This is a cross-check: to confirm that there is no treatment appearing more than once per block. If it returns no rows, we have confirmation that our RCBD design is valid, meaning a treatment is appearing only once in each of the reps. If it returns any row, it means there is something wrong in the randomization process.
```


## Plot layout  
```{r rcbd_layout}
rcbd_layout <- rcbd_rand %>%
  # Defining number of rows and columns in the field for plotting purposes
  mutate(row = rep(1:4, each = 9)) %>%
  mutate(col = rep(seq(from = 1, 
                       to = 9, #total number of treatments, 
                       by = 1), 
                   times = 4 #total number of blocks
  )) %>%
  # Creating plot and trtname labels for plotting
  mutate(plotlabel = paste0(plot, "\n", trtname))

rcbd_layout
```

Now, let's plot it.
```{r rcbd map}
ggplot(data = rcbd_layout, aes(x = row, 
                               y = -col))+
  geom_tile(aes(fill = trtname),
            color = "black",
            show.legend = F
  )+
  geom_text(aes(label = plot), fontface = "bold", vjust = -.5)+
  geom_text(aes(label = trtname), vjust = 1)+
  labs(title = "RCBD randomization of a 3 x 3 factorial (9 treatments)") +
  scale_fill_brewer(palette = "Set3") +
  theme_void()

```

Notice how now each treatment appears only once per column, where column represents the reps or blocks.  

# Exporting to file  
If this is in fact your study, you may want to export both the field randomization table AND the layout map.  

Let's do that below for the RCBD example.  

```{r}
rcbd_rand %>%
  # Retrieving other information contained in trts
  left_join(trts) %>% #"left_join()" is a very v-e-r-y powerful function to merge two datasets/ objects/ dataframes that have 1 common column and common levels under that column even if they have unequal row numbers. By doing this "left_join()", it's gonna take whatever is on the left side (of the pipe "%>%") and join whatever is coming from the right side to the left side. If they have different row numbers (like the first "rcbd_rand" has 36 rows whereas the "trts" object has only 9 rows), it is just gonna repeat those values where it sees where there is repetition to do. This "left_join()" function is very useful to merge 2 datasets that are separate but you have pieces of information in both datasets that you want to combine.
  # Rearranging columns
  dplyr::select(plot, rep, trtname, trtnum, 
                nrate_kgha, krate_kgha
                ) %>%
  write_csv("../output/rcbd_randomization_table.csv")


```

`ggsave()` will save the last plot created in the session, even if from an above chunk. Since the last plot we created was the RCBD layout, we can just go ahead and call ggsave here.  

```{r}
ggsave("../output/rcbd_layoutmap_Assignment4_Shakir.png",
       width = 6,
       height = 4,
       bg = "white")
```


